include:
  - project: jitesoft/gitlab-ci-lib
    file: Scan/trivy.yml
  - project: jitesoft/gitlab-ci-lib
    file: OCI/sign.yml

variables:
  PLATFORMS: "linux/amd64,linux/arm64"

stages:
  - build
  - containerize
  - sign
  - cache
  - scan

check:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - apk add --no-cache jq
    - VERSION=$(wget -qO- https://api.github.com/repos/cloudflare/cfssl/releases | jq -r ".[0].tag_name")
    - VERSION=${VERSION#?} # Remove v
    - touch version.txt
    - |
      if [ ! -z "${FORCE_BUILD+x}" ] || [ "${VERSION}" != "$(cat version.txt)" ]; then
        echo "${VERSION} and $(cat version.txt) differ. Running build."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        echo "${VERSION} and $(cat version.txt) where equal. Running scan."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${VERSION}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
  cache:
    paths:
      - version.txt
    policy: pull

download:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  rules:
    - if: "$BUILD"
      when: always
    - when: never
  stage: .pre
  script:
    - wget https://github.com/cloudflare/cfssl/archive/refs/tags/v${VERSION}.tar.gz
  artifacts:
    paths:
      - v${VERSION}.tar.gz
    expire_in: 1 day

build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/go:latest
  needs:
    - job: download
      artifacts: true
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  parallel:
    matrix:
      - { GOARCH: "amd64", GIT_STRATEGY: "none" }
      - { GOARCH: "arm64", GIT_STRATEGY: "none" }
      - { GOARCH: "ppc64le", GIT_STRATEGY: "none" }
      - { GOARCH: "s390x", GIT_STRATEGY: "none" }
      - { GOARCH: "arm", GO_ARM: "v7", GIT_STRATEGY: "none"}
  script:
    - tar -xzf v${VERSION}.tar.gz
    - cd cfssl-${VERSION}
    - go build -ldflags="-s -w -X github.com/cloudflare/cfssl/cli/version.version=${VERSION}" -o bin/ ./cmd/...
    - cd ..
    - mkdir -p bin/${ARCH}
    - mv cfssl-${VERSION}/bin/* bin/${ARCH}
  artifacts:
    paths:
      - bin
    expire_in: 1 day
  tags: [ native-amd64 ]

containerize:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: containerize
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  needs:
    - job: build
      artifacts: true
  script:
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE},ghcr.io/jitesoft/cfssl,jitesoft/cfssl" "latest,${VERSION}")
    - docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x --progress plain --push ${TAGS} --build-arg VERSION=${VERSION} .
  tags: [ buildx, jitesoft, protected ]

sign:
  extends: .sign
  tags: [ jitesoft, protected, buildx ]
  stage: sign
  variables:
    COSIGN_ANNOTATIONS: "-a sig=jitesoft-bot"
    SIGN_TAGS: "${VERSION},latest"
    SIGN_IMAGES: "jitesoft/cfssl,${CI_REGISTRY_IMAGE},ghcr.io/jitesoft/cfssl"
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never

scan:
  stage: scan
  extends: .container_scanning
  rules:
    - if: "$SCAN"
      when: always
    - if: "$BUILD"
      when: on_success
    - when: never
  variables:
    GIT_STRATEGY: none
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:latest"

create-cache:
  stage: cache
  script:
    - echo "${VERSION}" > version.txt
  cache:
    paths:
      - version.txt
    policy: push
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
